@page "/"

<div class="top-row px-4">
    @if (chatting)
    {
        <p>You are connected as <b>@username</b></p>
        <button class="btn btn-sm btn-warning ml-md-auto" onclick="@Disconnect">Disconnect</button>
    }
    @*<a href="https://github.com/conficient/BlazorChatSample" target="_blank" class="ml-md-auto">About</a>*@
</div>

<div class="content px-4">

    <h1>Blazor SignalR Chat Sample</h1>


    @if (!chatting)
    {
        <p>
            This application demonstrates the use of <a href="https://www.asp.net/signalr">SignalR</a>
            to create a <a href="https://blazor.net/">Blazor</a> chat application.
        </p>

        <p>
            At the present time, Blazor (version 0.5.0) cannot use the .NET Core SignalR client library
            (<a href="https://github.com/aspnet/Blazor/issues/20">see issue #20</a>), so this application
            uses the <a href="https://blazor.net/docs/javascript-interop.html">Blazor Javascript interop library</a>
            to talk to the SignalR Javascript client.
        </p>
        <p>
            This version of the app has been updated to handle the new JSInterop in 0.5.0 
            (see https://blazor.net/docs/javascript-interop.html). A few parts of the documentation are not 
            that clear so I will submit a pull request to clarify these. In particular you have to call 
            <code>invokeAsync&lt;object&gt;</code> to invoke a Javascript method even if it does not return a value.
        </p>
        <p>
            Source code at <a href="https://github.com/conficient/BlazorChatSample">Github</a>.
        </p>

        <hr />

        <h2>Chat</h2>

        <p>
            Enter your name to start chatting:
        </p>

        <input type="text" maxlength="32" bind="@username" />
        <button type="button" onclick="@Chat"><span class="oi oi-chat" aria-hidden="true"></span> Chat!</button>

        @if (message != null)
        {
            <div class="invalid-feedback">@message</div>
            <small id="emailHelp" class="form-text text-muted">@message</small>
        }
    }

    @if (chatting)
    {
        <div id="scrollbox">

            @foreach (var item in messages)
            {
                <div class="@item.CSS">
                    <div class="user">@item.Username</div>
                    <div class="msg">@item.Body</div>
                </div>
            }
            <hr />
            <textarea class="input-lg" placeholder="enter your comment" bind="@newMessage"></textarea>
            <button class="btn btn-default" onclick="@Send">Send</button>
        </div>
    }

</div>


@functions  {
// flag to indicate chat status
bool chatting = false;

// name of the user who will be chatting
string username;

ChatClient client;

// on-screen message
string message;

// new message input
string newMessage;

// list of messages in chat
List<Message> messages = new List<Message>();

/// <summary>
/// Start chat client
/// </summary>
async Task Chat()
{
    // check username is valid
    if (string.IsNullOrWhiteSpace(username))
    {
        message = "Please enter a name";
        return;
    };

    try
    {
        // remove old messages if any
        messages.Clear();

        // Create the chat client
        client = new ChatClient(username);
        // add an event handler for incoming messages
        client.MessageReceived += MessageReceived;
        // start the client
        Console.WriteLine($"Index: chart starting...");
        await client.Start();
        Console.WriteLine($"Index: chart started?");

        chatting = true;
    }
    catch (Exception e)
    {
        message = $"ERROR: Failed to start chat client: {e.Message}";
        Console.WriteLine(e.Message);
        Console.WriteLine(e.StackTrace);
    }
}

/// <summary>
/// Inbound message
/// </summary>
/// <param name="sender"></param>
/// <param name="e"></param>
void MessageReceived(object sender, MessageReceivedEventArgs e)
{
    Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
    bool isMine = false;
    if (!string.IsNullOrWhiteSpace(e.Username))
        isMine = string.Equals(e.Username, username, StringComparison.CurrentCultureIgnoreCase);

    var newMsg = new Message(e.Username, e.Message, isMine);
    messages.Add(newMsg);

    // Inform blazor the UI needs updating
    StateHasChanged();
}

async Task Disconnect()
{
    if (chatting)
    {
        await client.Stop();
        client.Dispose();
        client = null;
        message = "chat ended";
        chatting = false;
    }
}


async Task Send()
{
    if (chatting && !string.IsNullOrWhiteSpace(newMessage))
    {
        // send message to hub
        await client.Send(newMessage);
        // clear input box
        newMessage = "";
    }
}

class Message
{
    public Message(string username, string body, bool mine)
    {
        Username = username;
        Body = body;
        Mine = mine;
    }

    public string Username { get; set; }
    public string Body { get; set; }
    public bool Mine { get; set; }

    /// <summary>
    /// Determine CSS classes to use for message div
    /// </summary>
    public string CSS
    {
        get
        {
            return Mine ? "sent" : "received";
        }
    }

}
}