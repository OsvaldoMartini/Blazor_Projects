@using Toss.Shared.Account
@page "/account/externalLogin"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@layout LoginLayout

<h4>Associate your @model.Provider account.</h4>
<hr />

<p class="text-info">
    You've successfully authenticated with <strong>@model.Provider</strong>.
    Please enter an email address and a login for this site below and click the Register button to finish
    logging in.
</p>

<div class="row">
    <div class="col-md-4">
        <form method="post" >
            <div class="form-group">
                <label for="Email">Email</label>
                <input id="Email" bind="@model.Email" class="form-control" />
                <ValidationError FieldName="Email" Errors="@_errors" />
            </div>           
            <button type="button" ref="confirmButton" onclick="@ExternalLoginConfirm" class="btn btn-default">Register</button>
            <ValidationError FieldName="Other" Errors="@_errors" />
        </form>
    </div>
</div>


@functions {

    ElementRef confirmButton;
    Dictionary<string,List<string>> _errors;
    ExternalLoginConfirmationCommand model = new ExternalLoginConfirmationCommand();
    protected override async Task OnInitAsync()
    {
        await ClientFactory.Create("/api/account/externalLoginDetails")
            .OnOK<ExternalLoginConfirmationCommand>(a => model = a)
            .Get();
        StateHasChanged();
    }
    async Task ExternalLoginConfirm()
    {
        _errors = null;
        await ClientFactory.Create("/api/account/externalLoginConfirmation", confirmButton)
            .OnBadRequest<Dictionary<string,List<string>>>(errors => _errors = errors)
            .OnOK("Account successfully set", "/")
            .Post(model);
        StateHasChanged();
    }
}
