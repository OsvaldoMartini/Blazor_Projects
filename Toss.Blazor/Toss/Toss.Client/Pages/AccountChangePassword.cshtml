@page "/account/changePassword"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IUriHelper UriHelper
@inject IAccountService AccountService
<AccountMenu></AccountMenu>
@if (_account != null && _account.HasPassword)
{
    <form method="post">
        <div class="form-group">
            <label for="OldPassword">Old Password</label>
            <input id="OldPassword" bind="@command.OldPassword" type="password" class="form-control" />
            <ValidationError FieldName="OldPassword" Errors="@_errors" />
        </div>
        <div class="form-group">
            <label for="NewPassword"> New Password</label>
            <input id="NewPassword" bind="@command.NewPassword" type="password" class="form-control" />
            <ValidationError FieldName="NewPassword" Errors="@_errors" />
        </div>
        <div class="form-group">
            <label for="ConfirmPassword">Confirm Password</label>
            <input id="ConfirmPassword" bind="@command.ConfirmPassword" type="password" class="form-control" />
            <ValidationError FieldName="ConfirmPassword" Errors="@_errors" />
        </div>
        <button ref="updateButton" type="button" onclick="@ChangePassword" class="btn btn-default">Update password</button>
    </form>
}
else
{
    <div class="alert alert-info">You are logging in through an external provider such as Google, you can not change your password as you don't have one here. Go to your provider profile and change your apssword there.</div>

}
    @functions{
        Dictionary<string,List<string>> _errors;
        ChangePasswordCommand command = new ChangePasswordCommand();
        ElementRef updateButton;
        private AccountViewModel _account;
        protected override async Task OnInitAsync()
        {
            //forces call to get current account details so the user get redirected if not logged (TODO : make a batter abstraction)
            _account = await AccountService.CurrentAccount();
            StateHasChanged();
        }
        async Task ChangePassword()
        {

            _errors = null;
            await ClientFactory.Create("/api/account/changePassword", updateButton)
                .OnBadRequest<Dictionary<string,List<string>>>(errors => _errors = errors)
                .OnOK(async () =>
                {
                    await JsInterop.Toastr("success", "Password changed successfully");
                    command = new ChangePasswordCommand();
                })
                .Post(command);
            StateHasChanged();
        }
    }
